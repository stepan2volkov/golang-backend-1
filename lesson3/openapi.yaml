openapi: "3.0.1"
info:
  title: Online Store API
  description: Example of Online Store API
  version: 1.0.0

servers:
  - url: https://online-store.com/api/v1
    description: Production Server
  - url: https://staging.online-store.com/api/v1
    description: Staging Server

tags:
- name: user
  description: Operations about user
- name: item
  description: Operations with items
- name: order
  description: Operations with user orders

paths:
  /user/login:
    post:
      tags:
      - user
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: invalid username/password supplied
          content: {}
  /user/logout:
    post:
      tags:
      - user
      summary: log out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  /items:
    get:
      tags:
      - item
      summary: List of items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        400:
          description: Invalid price range
          content: {}
    post:
      tags:
      - item
      summary: Add a new item to the store
      operationId: CreateItem
      parameters:
        - name: body
          in: query
          description: Item object that needs to be added to the store
          required: true
          schema: 
            $ref: "#/components/schemas/Item"
      responses:
        405:
          description: "invalid input"
      security:
        - api_key: []
  /items/upload_image:
    post:
      tags:
      - item
      summary: upload an image
      operationId: UploadImage
      parameters:
      - name: additionalMetadata
        in: query
        description: additional data to pass to the server
        required: true
        schema:
          type: string
      responses:
        201:
          description: successful operation
          content: {}
      security:
      - api_key: []
  /items/{itemId}:
    get:
      tags:
      - item
      summary: Find item by ID
      operationId: GetItem
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/Item"
        400:
          description: Invalid ID supplied
          content: {}
    put:
      tags:
      - item
      summary: Update an item in the store with form data
      operationId: UpdateItem
      parameters:
        - name: itemId
          in: path
          description: ID of Item that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: invalid input
          content: {}
      security:
      - api_key: []
    delete:
      tags:
      - item
      summary: Delete an item
      operationId: DeleteItem
      parameters:
        - name: itemId
          in: path
          description: Item ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
        - api_key: []
  /order:
    post:
      tags:
      - order
      summary: Create empty order
      operationId: CreateOrder
      responses:
        201:
          description: Order created successful
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
        400:
          description: Order already exists
        404:
          description: Internal Server Error
      security:
        - api_key: []
  /order/{orderId}:
    get:
      tags:
      - order
      summary: Get order with list of items
      operationId: GetOrder
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/Order"
        403:
          description: Forbidden
        404:
          description: Internal Server Error
          content: {}
      security:
        - api_key: []
    put:
      tags:
      - order
      summary: Update order
      operationId: UpdateOrder
      parameters:
        - name: order
          in: query
          description: New order object to replace existed one
          required: true
          schema:
            $ref: "#/components/schemas/Order"
      responses:
        200:
          description: Successful Operation
        400:
          description: Invalid Input
        403:
          description: Forbidden
        404:
          description: Order not found
      security:
        - api_key: []
  

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name: 
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
    OrderItem:
      allOf:
        - $ref: "#/components/schemas/Item"
        - type: object
          properties:
            count:
              type: integer
              format: int64
    Order:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
    

        


  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header